%%% The following module is generated by the gen-serializer-test-suite.sh script.
%%% Do not edit by hand.

-module(serializer_ntriples_SUITE).
-include_lib("common_test/include/ct.hrl").
-export([all/0]).

%% The test suite is generated from the test manifest file ct/serializer_ntriples_SUITE_data/manifest.ttl

-export([nt_syntax_file_01/1]).
-export([nt_syntax_file_02/1]).
-export([nt_syntax_file_03/1]).
-export([nt_syntax_uri_01/1]).
-export([nt_syntax_uri_02/1]).
-export([nt_syntax_uri_03/1]).
-export([nt_syntax_uri_04/1]).
-export([nt_syntax_string_01/1]).
-export([nt_syntax_string_02/1]).
-export([nt_syntax_string_03/1]).
-export([nt_syntax_str_esc_01/1]).
-export([nt_syntax_str_esc_02/1]).
-export([nt_syntax_str_esc_03/1]).
-export([nt_syntax_bnode_01/1]).
-export([nt_syntax_bnode_02/1]).
-export([nt_syntax_bnode_03/1]).
-export([nt_syntax_datatypes_01/1]).
-export([nt_syntax_datatypes_02/1]).
-export([nt_syntax_subm_01/1]).
-export([comment_following_triple/1]).
-export([literal_ascii_boundaries/1]).
-export([literal_with_UTF8_boundaries/1]).
-export([literal_all_controls/1]).
-export([literal_all_punctuation/1]).
-export([literal_with_squote/1]).
-export([literal_with_2_squotes/1]).
-export([literal/1]).
-export([literal_with_dquote/1]).
-export([literal_with_2_dquotes/1]).
-export([literal_with_REVERSE_SOLIDUS2/1]).
-export([literal_with_CHARACTER_TABULATION/1]).
-export([literal_with_BACKSPACE/1]).
-export([literal_with_LINE_FEED/1]).
-export([literal_with_CARRIAGE_RETURN/1]).
-export([literal_with_FORM_FEED/1]).
-export([literal_with_REVERSE_SOLIDUS/1]).
-export([literal_with_numeric_escape4/1]).
-export([literal_with_numeric_escape8/1]).
-export([langtagged_string/1]).
-export([lantag_with_subtag/1]).
-export([minimal_whitespace/1]).
-export([init_per_suite/1, end_per_suite/1]).
-export([init_per_testcase/2, end_per_testcase/2]).

init_per_suite(Config) ->
    {ok, _} = application:ensure_all_started(lagra),
    Config.

end_per_suite(_Config) ->
    application:stop(lagra),
    ok.

init_per_testcase(_, Config) ->
    Store1 = lagra:create_store(trivial),
    Store2 = lagra:create_store(trivial),
    [{store1, Store1}, {store2, Store2}|Config].

end_per_testcase(_, Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    lagra:destroy_store(Store1),
	lagra:destroy_store(Store2).


nt_syntax_file_01(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-file-01.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-file-01.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_file_02(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-file-02.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-file-02.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_file_03(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-file-03.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-file-03.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_uri_01(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-uri-01.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-uri-01.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_uri_02(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-uri-02.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-uri-02.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_uri_03(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-uri-03.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-uri-03.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_uri_04(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-uri-04.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-uri-04.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_string_01(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-string-01.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-string-01.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_string_02(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-string-02.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-string-02.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_string_03(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-string-03.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-string-03.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_str_esc_01(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-str-esc-01.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-str-esc-01.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_str_esc_02(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-str-esc-02.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-str-esc-02.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_str_esc_03(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-str-esc-03.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-str-esc-03.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_bnode_01(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-bnode-01.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-bnode-01.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_bnode_02(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-bnode-02.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-bnode-02.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_bnode_03(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-bnode-03.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-bnode-03.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_datatypes_01(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-datatypes-01.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-datatypes-01.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_datatypes_02(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-datatypes-02.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-datatypes-02.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

nt_syntax_subm_01(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-subm-01.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "nt-syntax-subm-01.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

comment_following_triple(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "comment_following_triple.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "comment_following_triple.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_ascii_boundaries(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_ascii_boundaries.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_ascii_boundaries.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_UTF8_boundaries(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_UTF8_boundaries.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_UTF8_boundaries.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_all_controls(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_all_controls.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_all_controls.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_all_punctuation(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_all_punctuation.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_all_punctuation.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_squote(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_squote.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_squote.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_2_squotes(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_2_squotes.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_2_squotes.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_dquote(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_dquote.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_dquote.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_2_dquotes(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_2_dquotes.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_2_dquotes.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_REVERSE_SOLIDUS2(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_REVERSE_SOLIDUS2.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_REVERSE_SOLIDUS2.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_CHARACTER_TABULATION(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_CHARACTER_TABULATION.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_CHARACTER_TABULATION.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_BACKSPACE(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_BACKSPACE.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_BACKSPACE.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_LINE_FEED(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_LINE_FEED.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_LINE_FEED.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_CARRIAGE_RETURN(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_CARRIAGE_RETURN.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_CARRIAGE_RETURN.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_FORM_FEED(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_FORM_FEED.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_FORM_FEED.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_REVERSE_SOLIDUS(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_REVERSE_SOLIDUS.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_REVERSE_SOLIDUS.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_numeric_escape4(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_numeric_escape4.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_numeric_escape4.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

literal_with_numeric_escape8(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_numeric_escape8.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "literal_with_numeric_escape8.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

langtagged_string(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "langtagged_string.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "langtagged_string.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

lantag_with_subtag(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "lantag_with_subtag.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "lantag_with_subtag.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).

minimal_whitespace(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    Filename = filename:join(?config(data_dir, Config), "minimal_whitespace.nt"),
    io:format("Filename = ~p~n", [Filename]),
    Testfile = filename:join(?config(priv_dir, Config), "minimal_whitespace.nt"),
    io:format("Testfile = ~p~n", [Testfile]),

    % Load the file
    {ok, File1} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, ntriples),
    file:close(File1),

    % Write it out
	{ok, File2} = file:open(Testfile, [write, {encoding, utf8}]),
	ok = lagra:serialize(Store1, File2, ntriples, #{notify => sync}),
    file:close(File2),

	io:format("~ts~n---~n~ts~n", [os:cmd("cat "++Filename),
                                    os:cmd("cat "++Testfile)]),

    % Load it again
    {ok, File3} = file:open(Testfile, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store2, File3, ntriples),
    file:close(File3),

    % Test that they're isomorphic
    true = lagra:isomorphic(Store1, <<"urn:nil">>, Store2, <<"urn:nil">>).


all() ->
    [nt_syntax_file_01,nt_syntax_file_02,nt_syntax_file_03,nt_syntax_uri_01,nt_syntax_uri_02,nt_syntax_uri_03,nt_syntax_uri_04,nt_syntax_string_01,nt_syntax_string_02,nt_syntax_string_03,nt_syntax_str_esc_01,nt_syntax_str_esc_02,nt_syntax_str_esc_03,nt_syntax_bnode_01,nt_syntax_bnode_02,nt_syntax_bnode_03,nt_syntax_datatypes_01,nt_syntax_datatypes_02,nt_syntax_subm_01,comment_following_triple,literal_ascii_boundaries,literal_with_UTF8_boundaries,literal_all_controls,literal_all_punctuation,literal_with_squote,literal_with_2_squotes,literal,literal_with_dquote,literal_with_2_dquotes,literal_with_REVERSE_SOLIDUS2,literal_with_CHARACTER_TABULATION,literal_with_BACKSPACE,literal_with_LINE_FEED,literal_with_CARRIAGE_RETURN,literal_with_FORM_FEED,literal_with_REVERSE_SOLIDUS,literal_with_numeric_escape4,literal_with_numeric_escape8,langtagged_string,lantag_with_subtag,minimal_whitespace].
