%%% The following module is generated by the gen-parser-test-suite.sh script.
%%% Do not edit by hand.

-module(parser_turtle_w3_SUITE).
-include_lib("common_test/include/ct.hrl").
-export([all/0]).

%% The test suite is generated from the test manifest file ct/parser_turtle_w3_SUITE_data/manifest.ttl

-export(['IRI_subject'/1]).
-export(['IRI_with_four_digit_numeric_escape'/1]).
-export(['IRI_with_eight_digit_numeric_escape'/1]).
-export(['IRI_with_all_punctuation'/1]).
-export(['bareword_a_predicate'/1]).
-export(['old_style_prefix'/1]).
-export(['SPARQL_style_prefix'/1]).
-export(['prefixed_IRI_predicate'/1]).
-export(['prefixed_IRI_object'/1]).
-export(['prefix_only_IRI'/1]).
-export(['prefix_with_PN_CHARS_BASE_character_boundaries'/1]).
-export(['prefix_with_non_leading_extras'/1]).
-export(['localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries'/1]).
-export(['localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries'/1]).
-export(['localName_with_nfc_PN_CHARS_BASE_character_boundaries'/1]).
-export(['default_namespace_IRI'/1]).
-export(['prefix_reassigned_and_used'/1]).
-export(['reserved_escaped_localName'/1]).
-export(['percent_escaped_localName'/1]).
-export(['HYPHEN_MINUS_in_localName'/1]).
-export(['underscore_in_localName'/1]).
-export(['localname_with_COLON'/1]).
-export(['localName_with_leading_underscore'/1]).
-export(['localName_with_leading_digit'/1]).
-export(['localName_with_non_leading_extras'/1]).
-export(['old_style_base'/1]).
-export(['SPARQL_style_base'/1]).
-export(['labeled_blank_node_subject'/1]).
-export(['labeled_blank_node_object'/1]).
-export(['labeled_blank_node_with_PN_CHARS_BASE_character_boundaries'/1]).
-export(['labeled_blank_node_with_leading_underscore'/1]).
-export(['labeled_blank_node_with_leading_digit'/1]).
-export(['labeled_blank_node_with_non_leading_extras'/1]).
-export(['anonymous_blank_node_subject'/1]).
-export(['anonymous_blank_node_object'/1]).
-export(['sole_blankNodePropertyList'/1]).
-export(['blankNodePropertyList_as_subject'/1]).
-export(['blankNodePropertyList_as_object'/1]).
-export(['blankNodePropertyList_with_multiple_triples'/1]).
-export(['nested_blankNodePropertyLists'/1]).
-export(['blankNodePropertyList_containing_collection'/1]).
-export(['collection_subject'/1]).
-export(['collection_object'/1]).
-export(['empty_collection'/1]).
-export(['nested_collection'/1]).
-export(['first'/1]).
-export(['last'/1]).
-export(['LITERAL1'/1]).
-export(['LITERAL1_ascii_boundaries'/1]).
-export(['LITERAL1_with_UTF8_boundaries'/1]).
-export(['LITERAL1_all_controls'/1]).
-export(['LITERAL1_all_punctuation'/1]).
-export(['LITERAL_LONG1'/1]).
-export(['LITERAL_LONG1_ascii_boundaries'/1]).
-export(['LITERAL_LONG1_with_UTF8_boundaries'/1]).
-export(['LITERAL_LONG1_with_1_squote'/1]).
-export(['LITERAL_LONG1_with_2_squotes'/1]).
-export(['LITERAL2'/1]).
-export(['LITERAL2_ascii_boundaries'/1]).
-export(['LITERAL2_with_UTF8_boundaries'/1]).
-export(['LITERAL_LONG2'/1]).
-export(['LITERAL_LONG2_ascii_boundaries'/1]).
-export(['LITERAL_LONG2_with_UTF8_boundaries'/1]).
-export(['LITERAL_LONG2_with_1_squote'/1]).
-export(['LITERAL_LONG2_with_2_squotes'/1]).
-export(['literal_with_CHARACTER_TABULATION'/1]).
-export(['literal_with_BACKSPACE'/1]).
-export(['literal_with_LINE_FEED'/1]).
-export(['literal_with_CARRIAGE_RETURN'/1]).
-export(['literal_with_FORM_FEED'/1]).
-export(['literal_with_REVERSE_SOLIDUS'/1]).
-export(['literal_with_escaped_CHARACTER_TABULATION'/1]).
-export(['literal_with_escaped_BACKSPACE'/1]).
-export(['literal_with_escaped_LINE_FEED'/1]).
-export(['literal_with_escaped_CARRIAGE_RETURN'/1]).
-export(['literal_with_escaped_FORM_FEED'/1]).
-export(['literal_with_numeric_escape4'/1]).
-export(['literal_with_numeric_escape8'/1]).
-export(['IRIREF_datatype'/1]).
-export(['prefixed_name_datatype'/1]).
-export(['bareword_integer'/1]).
-export(['bareword_decimal'/1]).
-export(['bareword_double'/1]).
-export(['double_lower_case_e'/1]).
-export(['negative_numeric'/1]).
-export(['positive_numeric'/1]).
-export(['numeric_with_leading_0'/1]).
-export(['literal_true'/1]).
-export(['literal_false'/1]).
-export(['langtagged_non_LONG'/1]).
-export(['langtagged_LONG'/1]).
-export(['lantag_with_subtag'/1]).
-export(['objectList_with_two_objects'/1]).
-export(['predicateObjectList_with_two_objectLists'/1]).
-export(['repeated_semis_at_end'/1]).
-export(['repeated_semis_not_at_end'/1]).
-export(['turtle-syntax-file-01'/1]).
-export(['turtle-syntax-file-02'/1]).
-export(['turtle-syntax-file-03'/1]).
-export(['turtle-syntax-uri-01'/1]).
-export(['turtle-syntax-uri-02'/1]).
-export(['turtle-syntax-uri-03'/1]).
-export(['turtle-syntax-uri-04'/1]).
-export(['turtle-syntax-base-01'/1]).
-export(['turtle-syntax-base-02'/1]).
-export(['turtle-syntax-base-03'/1]).
-export(['turtle-syntax-base-04'/1]).
-export(['turtle-syntax-prefix-01'/1]).
-export(['turtle-syntax-prefix-02'/1]).
-export(['turtle-syntax-prefix-03'/1]).
-export(['turtle-syntax-prefix-04'/1]).
-export(['turtle-syntax-prefix-05'/1]).
-export(['turtle-syntax-prefix-06'/1]).
-export(['turtle-syntax-prefix-07'/1]).
-export(['turtle-syntax-prefix-08'/1]).
-export(['turtle-syntax-prefix-09'/1]).
-export(['turtle-syntax-string-01'/1]).
-export(['turtle-syntax-string-02'/1]).
-export(['turtle-syntax-string-03'/1]).
-export(['turtle-syntax-string-04'/1]).
-export(['turtle-syntax-string-05'/1]).
-export(['turtle-syntax-string-06'/1]).
-export(['turtle-syntax-string-07'/1]).
-export(['turtle-syntax-string-08'/1]).
-export(['turtle-syntax-string-09'/1]).
-export(['turtle-syntax-string-10'/1]).
-export(['turtle-syntax-string-11'/1]).
-export(['turtle-syntax-str-esc-01'/1]).
-export(['turtle-syntax-str-esc-02'/1]).
-export(['turtle-syntax-str-esc-03'/1]).
-export(['turtle-syntax-pname-esc-01'/1]).
-export(['turtle-syntax-pname-esc-02'/1]).
-export(['turtle-syntax-pname-esc-03'/1]).
-export(['turtle-syntax-bnode-01'/1]).
-export(['turtle-syntax-bnode-02'/1]).
-export(['turtle-syntax-bnode-03'/1]).
-export(['turtle-syntax-bnode-04'/1]).
-export(['turtle-syntax-bnode-05'/1]).
-export(['turtle-syntax-bnode-06'/1]).
-export(['turtle-syntax-bnode-07'/1]).
-export(['turtle-syntax-bnode-08'/1]).
-export(['turtle-syntax-bnode-09'/1]).
-export(['turtle-syntax-bnode-10'/1]).
-export(['turtle-syntax-number-01'/1]).
-export(['turtle-syntax-number-02'/1]).
-export(['turtle-syntax-number-03'/1]).
-export(['turtle-syntax-number-04'/1]).
-export(['turtle-syntax-number-05'/1]).
-export(['turtle-syntax-number-06'/1]).
-export(['turtle-syntax-number-07'/1]).
-export(['turtle-syntax-number-08'/1]).
-export(['turtle-syntax-number-09'/1]).
-export(['turtle-syntax-number-10'/1]).
-export(['turtle-syntax-number-11'/1]).
-export(['turtle-syntax-datatypes-01'/1]).
-export(['turtle-syntax-datatypes-02'/1]).
-export(['turtle-syntax-kw-01'/1]).
-export(['turtle-syntax-kw-02'/1]).
-export(['turtle-syntax-kw-03'/1]).
-export(['turtle-syntax-struct-01'/1]).
-export(['turtle-syntax-struct-02'/1]).
-export(['turtle-syntax-struct-03'/1]).
-export(['turtle-syntax-struct-04'/1]).
-export(['turtle-syntax-struct-05'/1]).
-export(['turtle-syntax-lists-01'/1]).
-export(['turtle-syntax-lists-02'/1]).
-export(['turtle-syntax-lists-03'/1]).
-export(['turtle-syntax-lists-04'/1]).
-export(['turtle-syntax-lists-05'/1]).
-export(['turtle-syntax-bad-uri-01'/1]).
-export(['turtle-syntax-bad-uri-02'/1]).
-export(['turtle-syntax-bad-uri-03'/1]).
-export(['turtle-syntax-bad-uri-04'/1]).
-export(['turtle-syntax-bad-uri-05'/1]).
-export(['turtle-syntax-bad-prefix-01'/1]).
-export(['turtle-syntax-bad-prefix-02'/1]).
-export(['turtle-syntax-bad-prefix-03'/1]).
-export(['turtle-syntax-bad-prefix-04'/1]).
-export(['turtle-syntax-bad-prefix-05'/1]).
-export(['turtle-syntax-bad-base-01'/1]).
-export(['turtle-syntax-bad-base-02'/1]).
-export(['turtle-syntax-bad-base-03'/1]).
-export(['turtle-syntax-bad-struct-01'/1]).
-export(['turtle-syntax-bad-struct-02'/1]).
-export(['turtle-syntax-bad-struct-03'/1]).
-export(['turtle-syntax-bad-struct-04'/1]).
-export(['turtle-syntax-bad-struct-05'/1]).
-export(['turtle-syntax-bad-struct-06'/1]).
-export(['turtle-syntax-bad-struct-07'/1]).
-export(['turtle-syntax-bad-kw-01'/1]).
-export(['turtle-syntax-bad-kw-02'/1]).
-export(['turtle-syntax-bad-kw-03'/1]).
-export(['turtle-syntax-bad-kw-04'/1]).
-export(['turtle-syntax-bad-kw-05'/1]).
-export(['turtle-syntax-bad-n3-extras-01'/1]).
-export(['turtle-syntax-bad-n3-extras-02'/1]).
-export(['turtle-syntax-bad-n3-extras-03'/1]).
-export(['turtle-syntax-bad-n3-extras-04'/1]).
-export(['turtle-syntax-bad-n3-extras-05'/1]).
-export(['turtle-syntax-bad-n3-extras-06'/1]).
-export(['turtle-syntax-bad-n3-extras-07'/1]).
-export(['turtle-syntax-bad-n3-extras-08'/1]).
-export(['turtle-syntax-bad-n3-extras-09'/1]).
-export(['turtle-syntax-bad-n3-extras-10'/1]).
-export(['turtle-syntax-bad-n3-extras-11'/1]).
-export(['turtle-syntax-bad-n3-extras-12'/1]).
-export(['turtle-syntax-bad-n3-extras-13'/1]).
-export(['turtle-syntax-bad-struct-08'/1]).
-export(['turtle-syntax-bad-struct-09'/1]).
-export(['turtle-syntax-bad-struct-10'/1]).
-export(['turtle-syntax-bad-struct-11'/1]).
-export(['turtle-syntax-bad-struct-12'/1]).
-export(['turtle-syntax-bad-struct-13'/1]).
-export(['turtle-syntax-bad-struct-14'/1]).
-export(['turtle-syntax-bad-struct-15'/1]).
-export(['turtle-syntax-bad-struct-16'/1]).
-export(['turtle-syntax-bad-struct-17'/1]).
-export(['turtle-syntax-bad-lang-01'/1]).
-export(['turtle-syntax-bad-esc-01'/1]).
-export(['turtle-syntax-bad-esc-02'/1]).
-export(['turtle-syntax-bad-esc-03'/1]).
-export(['turtle-syntax-bad-esc-04'/1]).
-export(['turtle-syntax-bad-pname-01'/1]).
-export(['turtle-syntax-bad-pname-02'/1]).
-export(['turtle-syntax-bad-pname-03'/1]).
-export(['turtle-syntax-bad-string-01'/1]).
-export(['turtle-syntax-bad-string-02'/1]).
-export(['turtle-syntax-bad-string-03'/1]).
-export(['turtle-syntax-bad-string-04'/1]).
-export(['turtle-syntax-bad-string-05'/1]).
-export(['turtle-syntax-bad-string-06'/1]).
-export(['turtle-syntax-bad-string-07'/1]).
-export(['turtle-syntax-bad-num-01'/1]).
-export(['turtle-syntax-bad-num-02'/1]).
-export(['turtle-syntax-bad-num-03'/1]).
-export(['turtle-syntax-bad-num-04'/1]).
-export(['turtle-syntax-bad-num-05'/1]).
-export(['turtle-eval-struct-01'/1]).
-export(['turtle-eval-struct-02'/1]).
-export(['turtle-subm-01'/1]).
-export(['turtle-subm-02'/1]).
-export(['turtle-subm-03'/1]).
-export(['turtle-subm-04'/1]).
-export(['turtle-subm-05'/1]).
-export(['turtle-subm-06'/1]).
-export(['turtle-subm-07'/1]).
-export(['turtle-subm-08'/1]).
-export(['turtle-subm-09'/1]).
-export(['turtle-subm-10'/1]).
-export(['turtle-subm-11'/1]).
-export(['turtle-subm-12'/1]).
-export(['turtle-subm-13'/1]).
-export(['turtle-subm-14'/1]).
-export(['turtle-subm-15'/1]).
-export(['turtle-subm-16'/1]).
-export(['turtle-subm-17'/1]).
-export(['turtle-subm-18'/1]).
-export(['turtle-subm-19'/1]).
-export(['turtle-subm-20'/1]).
-export(['turtle-subm-21'/1]).
-export(['turtle-subm-22'/1]).
-export(['turtle-subm-23'/1]).
-export(['turtle-subm-24'/1]).
-export(['turtle-subm-25'/1]).
-export(['turtle-subm-26'/1]).
-export(['turtle-subm-27'/1]).
-export(['turtle-eval-bad-01'/1]).
-export(['turtle-eval-bad-02'/1]).
-export(['turtle-eval-bad-03'/1]).
-export(['turtle-eval-bad-04'/1]).
-export(['comment_following_localName'/1]).
-export(['number_sign_following_localName'/1]).
-export(['comment_following_PNAME_NS'/1]).
-export(['number_sign_following_PNAME_NS'/1]).
-export(['LITERAL_LONG2_with_REVERSE_SOLIDUS'/1]).
-export(['turtle-syntax-LITERAL2_with_langtag_and_datatype'/1]).
-export(['two_LITERAL_LONG2s'/1]).
-export(['langtagged_LONG_with_subtag'/1]).
-export(['turtle-syntax-bad-blank-label-dot-end'/1]).
-export(['turtle-syntax-bad-number-dot-in-anon'/1]).
-export(['turtle-syntax-bad-ln-dash-start'/1]).
-export(['turtle-syntax-bad-ln-escape'/1]).
-export(['turtle-syntax-bad-ln-escape-start'/1]).
-export(['turtle-syntax-bad-ns-dot-end'/1]).
-export(['turtle-syntax-bad-ns-dot-start'/1]).
-export(['turtle-syntax-bad-missing-ns-dot-end'/1]).
-export(['turtle-syntax-bad-missing-ns-dot-start'/1]).
-export(['turtle-syntax-ln-dots'/1]).
-export(['turtle-syntax-ln-colons'/1]).
-export(['turtle-syntax-ns-dots'/1]).
-export(['turtle-syntax-blank-label'/1]).
-export([init_per_suite/1, end_per_suite/1]).
-export([init_per_testcase/2, end_per_testcase/2]).

init_per_suite(Config) ->
    {ok, _} = application:ensure_all_started(lagra),
    [{prefix, "http://www.w3.org/2013/TurtleTests/manifest.ttl\#"}|Config].

end_per_suite(_Config) ->
    application:stop(lagra),
    ok.

init_per_testcase(_, Config) ->
    Store1 = lagra:create_store(trivial),
    Store2 = lagra:create_store(trivial),
    [{store1, Store1}, {store2, Store2}|Config].

end_per_testcase(_, Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    lagra:destroy_store(Store1),
	lagra:destroy_store(Store2).


'IRI_subject'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_subject.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/IRI_subject.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'IRI_with_four_digit_numeric_escape'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_with_four_digit_numeric_escape.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/IRI_with_four_digit_numeric_escape.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'IRI_with_eight_digit_numeric_escape'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_with_eight_digit_numeric_escape.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/IRI_with_eight_digit_numeric_escape.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'IRI_with_all_punctuation'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_with_all_punctuation.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_with_all_punctuation.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/IRI_with_all_punctuation.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'bareword_a_predicate'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "bareword_a_predicate.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "bareword_a_predicate.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/bareword_a_predicate.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'old_style_prefix'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "old_style_prefix.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/old_style_prefix.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'SPARQL_style_prefix'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "SPARQL_style_prefix.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/SPARQL_style_prefix.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'prefixed_IRI_predicate'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "prefixed_IRI_predicate.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/prefixed_IRI_predicate.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'prefixed_IRI_object'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "prefixed_IRI_object.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/prefixed_IRI_object.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'prefix_only_IRI'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "prefix_only_IRI.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/prefix_only_IRI.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'prefix_with_PN_CHARS_BASE_character_boundaries'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "prefix_with_PN_CHARS_BASE_character_boundaries.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/prefix_with_PN_CHARS_BASE_character_boundaries.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'prefix_with_non_leading_extras'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "prefix_with_non_leading_extras.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/prefix_with_non_leading_extras.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'localName_with_nfc_PN_CHARS_BASE_character_boundaries'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "localName_with_nfc_PN_CHARS_BASE_character_boundaries.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "localName_with_nfc_PN_CHARS_BASE_character_boundaries.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/localName_with_nfc_PN_CHARS_BASE_character_boundaries.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'default_namespace_IRI'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "default_namespace_IRI.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/default_namespace_IRI.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'prefix_reassigned_and_used'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "prefix_reassigned_and_used.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "prefix_reassigned_and_used.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/prefix_reassigned_and_used.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'reserved_escaped_localName'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "reserved_escaped_localName.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "reserved_escaped_localName.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/reserved_escaped_localName.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'percent_escaped_localName'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "percent_escaped_localName.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "percent_escaped_localName.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/percent_escaped_localName.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'HYPHEN_MINUS_in_localName'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "HYPHEN_MINUS_in_localName.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "HYPHEN_MINUS_in_localName.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/HYPHEN_MINUS_in_localName.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'underscore_in_localName'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "underscore_in_localName.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "underscore_in_localName.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/underscore_in_localName.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'localname_with_COLON'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "localname_with_COLON.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "localname_with_COLON.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/localname_with_COLON.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'localName_with_leading_underscore'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "localName_with_leading_underscore.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "localName_with_leading_underscore.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/localName_with_leading_underscore.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'localName_with_leading_digit'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "localName_with_leading_digit.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "localName_with_leading_digit.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/localName_with_leading_digit.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'localName_with_non_leading_extras'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "localName_with_non_leading_extras.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "localName_with_non_leading_extras.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/localName_with_non_leading_extras.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'old_style_base'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "old_style_base.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/old_style_base.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'SPARQL_style_base'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "SPARQL_style_base.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/SPARQL_style_base.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'labeled_blank_node_subject'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_subject.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_subject.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/labeled_blank_node_subject.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'labeled_blank_node_object'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_object.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_object.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/labeled_blank_node_object.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'labeled_blank_node_with_PN_CHARS_BASE_character_boundaries'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_object.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/labeled_blank_node_with_PN_CHARS_BASE_character_boundaries.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'labeled_blank_node_with_leading_underscore'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_with_leading_underscore.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_object.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/labeled_blank_node_with_leading_underscore.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'labeled_blank_node_with_leading_digit'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_with_leading_digit.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_object.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/labeled_blank_node_with_leading_digit.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'labeled_blank_node_with_non_leading_extras'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_with_non_leading_extras.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_object.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/labeled_blank_node_with_non_leading_extras.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'anonymous_blank_node_subject'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "anonymous_blank_node_subject.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_subject.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/anonymous_blank_node_subject.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'anonymous_blank_node_object'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "anonymous_blank_node_object.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_object.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/anonymous_blank_node_object.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'sole_blankNodePropertyList'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "sole_blankNodePropertyList.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "labeled_blank_node_subject.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/sole_blankNodePropertyList.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'blankNodePropertyList_as_subject'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "blankNodePropertyList_as_subject.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "blankNodePropertyList_as_subject.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/blankNodePropertyList_as_subject.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'blankNodePropertyList_as_object'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "blankNodePropertyList_as_object.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "blankNodePropertyList_as_object.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/blankNodePropertyList_as_object.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'blankNodePropertyList_with_multiple_triples'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "blankNodePropertyList_with_multiple_triples.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "blankNodePropertyList_with_multiple_triples.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/blankNodePropertyList_with_multiple_triples.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'nested_blankNodePropertyLists'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "nested_blankNodePropertyLists.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "nested_blankNodePropertyLists.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/nested_blankNodePropertyLists.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'blankNodePropertyList_containing_collection'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "blankNodePropertyList_containing_collection.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "blankNodePropertyList_containing_collection.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/blankNodePropertyList_containing_collection.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'collection_subject'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "collection_subject.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "collection_subject.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/collection_subject.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'collection_object'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "collection_object.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "collection_object.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/collection_object.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'empty_collection'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "empty_collection.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "empty_collection.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/empty_collection.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'nested_collection'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "nested_collection.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "nested_collection.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/nested_collection.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'first'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "first.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "first.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/first.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'last'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "last.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "last.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/last.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL1'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL1.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL1.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL1.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL1_ascii_boundaries'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL1_ascii_boundaries.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL1_ascii_boundaries.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL1_ascii_boundaries.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL1_with_UTF8_boundaries'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL1_with_UTF8_boundaries.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_with_UTF8_boundaries.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL1_with_UTF8_boundaries.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL1_all_controls'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL1_all_controls.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL1_all_controls.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL1_all_controls.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL1_all_punctuation'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL1_all_punctuation.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL1_all_punctuation.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL1_all_punctuation.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL_LONG1'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG1.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL1.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL_LONG1.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL_LONG1_ascii_boundaries'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG1_ascii_boundaries.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG1_ascii_boundaries.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL_LONG1_ascii_boundaries.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL_LONG1_with_UTF8_boundaries'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG1_with_UTF8_boundaries.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_with_UTF8_boundaries.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL_LONG1_with_UTF8_boundaries.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL_LONG1_with_1_squote'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG1_with_1_squote.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG1_with_1_squote.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL_LONG1_with_1_squote.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL_LONG1_with_2_squotes'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG1_with_2_squotes.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG1_with_2_squotes.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL_LONG1_with_2_squotes.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL2'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL2.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL1.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL2.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL2_ascii_boundaries'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL2_ascii_boundaries.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL2_ascii_boundaries.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL2_ascii_boundaries.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL2_with_UTF8_boundaries'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL2_with_UTF8_boundaries.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_with_UTF8_boundaries.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL2_with_UTF8_boundaries.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL_LONG2'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG2.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL1.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL_LONG2.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL_LONG2_ascii_boundaries'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG2_ascii_boundaries.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG2_ascii_boundaries.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL_LONG2_ascii_boundaries.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL_LONG2_with_UTF8_boundaries'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG2_with_UTF8_boundaries.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_with_UTF8_boundaries.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL_LONG2_with_UTF8_boundaries.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL_LONG2_with_1_squote'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG2_with_1_squote.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG2_with_1_squote.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL_LONG2_with_1_squote.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL_LONG2_with_2_squotes'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG2_with_2_squotes.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG2_with_2_squotes.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL_LONG2_with_2_squotes.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_with_CHARACTER_TABULATION'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_CHARACTER_TABULATION.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_CHARACTER_TABULATION.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_with_CHARACTER_TABULATION.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_with_BACKSPACE'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_BACKSPACE.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_BACKSPACE.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_with_BACKSPACE.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_with_LINE_FEED'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_LINE_FEED.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_LINE_FEED.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_with_LINE_FEED.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_with_CARRIAGE_RETURN'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_CARRIAGE_RETURN.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_CARRIAGE_RETURN.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_with_CARRIAGE_RETURN.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_with_FORM_FEED'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_FORM_FEED.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_FORM_FEED.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_with_FORM_FEED.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_with_REVERSE_SOLIDUS'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_REVERSE_SOLIDUS.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_REVERSE_SOLIDUS.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_with_REVERSE_SOLIDUS.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_with_escaped_CHARACTER_TABULATION'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_escaped_CHARACTER_TABULATION.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_CHARACTER_TABULATION.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_with_escaped_CHARACTER_TABULATION.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_with_escaped_BACKSPACE'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_escaped_BACKSPACE.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_BACKSPACE.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_with_escaped_BACKSPACE.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_with_escaped_LINE_FEED'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_escaped_LINE_FEED.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_LINE_FEED.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_with_escaped_LINE_FEED.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_with_escaped_CARRIAGE_RETURN'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_escaped_CARRIAGE_RETURN.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_CARRIAGE_RETURN.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_with_escaped_CARRIAGE_RETURN.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_with_escaped_FORM_FEED'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_escaped_FORM_FEED.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_FORM_FEED.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_with_escaped_FORM_FEED.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_with_numeric_escape4'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_numeric_escape4.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_numeric_escape4.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_with_numeric_escape4.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_with_numeric_escape8'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_numeric_escape8.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_with_numeric_escape4.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_with_numeric_escape8.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'IRIREF_datatype'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRIREF_datatype.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRIREF_datatype.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/IRIREF_datatype.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'prefixed_name_datatype'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "prefixed_name_datatype.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRIREF_datatype.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/prefixed_name_datatype.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'bareword_integer'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "bareword_integer.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRIREF_datatype.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/bareword_integer.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'bareword_decimal'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "bareword_decimal.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "bareword_decimal.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/bareword_decimal.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'bareword_double'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "bareword_double.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "bareword_double.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/bareword_double.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'double_lower_case_e'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "double_lower_case_e.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "double_lower_case_e.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/double_lower_case_e.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'negative_numeric'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "negative_numeric.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "negative_numeric.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/negative_numeric.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'positive_numeric'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "positive_numeric.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "positive_numeric.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/positive_numeric.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'numeric_with_leading_0'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "numeric_with_leading_0.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "numeric_with_leading_0.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/numeric_with_leading_0.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_true'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_true.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_true.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_true.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'literal_false'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_false.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "literal_false.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/literal_false.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'langtagged_non_LONG'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "langtagged_non_LONG.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "langtagged_non_LONG.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/langtagged_non_LONG.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'langtagged_LONG'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "langtagged_LONG.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "langtagged_non_LONG.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/langtagged_LONG.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'lantag_with_subtag'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "lantag_with_subtag.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "lantag_with_subtag.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/lantag_with_subtag.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'objectList_with_two_objects'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "objectList_with_two_objects.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "objectList_with_two_objects.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/objectList_with_two_objects.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'predicateObjectList_with_two_objectLists'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "predicateObjectList_with_two_objectLists.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "predicateObjectList_with_two_objectLists.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/predicateObjectList_with_two_objectLists.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'repeated_semis_at_end'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "repeated_semis_at_end.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "predicateObjectList_with_two_objectLists.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/repeated_semis_at_end.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'repeated_semis_not_at_end'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "repeated_semis_not_at_end.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "repeated_semis_not_at_end.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/repeated_semis_not_at_end.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-syntax-file-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-file-01.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-file-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-file-02.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-file-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-file-03.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-uri-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-uri-01.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-uri-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-uri-02.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-uri-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-uri-03.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-uri-04'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-uri-04.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-base-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-base-01.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-base-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-base-02.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-base-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-base-03.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-base-04'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-base-04.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-prefix-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-prefix-01.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-prefix-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-prefix-02.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-prefix-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-prefix-03.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-prefix-04'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-prefix-04.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-prefix-05'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-prefix-05.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-prefix-06'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-prefix-06.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-prefix-07'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-prefix-07.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-prefix-08'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-prefix-08.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-prefix-09'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-prefix-09.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-string-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-string-01.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-string-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-string-02.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-string-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-string-03.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-string-04'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-string-04.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-string-05'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-string-05.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-string-06'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-string-06.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-string-07'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-string-07.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-string-08'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-string-08.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-string-09'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-string-09.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-string-10'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-string-10.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-string-11'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-string-11.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-str-esc-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-str-esc-01.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-str-esc-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-str-esc-02.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-str-esc-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-str-esc-03.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-pname-esc-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-pname-esc-01.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-pname-esc-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-pname-esc-02.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-pname-esc-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-pname-esc-03.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-bnode-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-bnode-01.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-bnode-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-bnode-02.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-bnode-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-bnode-03.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-bnode-04'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-bnode-04.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-bnode-05'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-bnode-05.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-bnode-06'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-bnode-06.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-bnode-07'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-bnode-07.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-bnode-08'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-bnode-08.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-bnode-09'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-bnode-09.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-bnode-10'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-bnode-10.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-number-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-number-01.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-number-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-number-02.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-number-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-number-03.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-number-04'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-number-04.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-number-05'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-number-05.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-number-06'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-number-06.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-number-07'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-number-07.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-number-08'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-number-08.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-number-09'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-number-09.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-number-10'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-number-10.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-number-11'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-number-11.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-datatypes-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-datatypes-01.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-datatypes-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-datatypes-02.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-kw-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-kw-01.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-kw-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-kw-02.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-kw-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-kw-03.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-struct-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-struct-01.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-struct-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-struct-02.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-struct-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-struct-03.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-struct-04'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-struct-04.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-struct-05'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-struct-05.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-lists-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-lists-01.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-lists-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-lists-02.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-lists-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-lists-03.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-lists-04'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-lists-04.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-lists-05'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-lists-05.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-uri-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-uri-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-uri-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-uri-02.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-uri-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-uri-03.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-uri-04'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-uri-04.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-uri-05'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-uri-05.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-prefix-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-prefix-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-prefix-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-prefix-02.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-prefix-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-prefix-03.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-prefix-04'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-prefix-04.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-prefix-05'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-prefix-05.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-base-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-base-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-base-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-base-02.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-base-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-base-03.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-02.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-03.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-04'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-04.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-05'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-05.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-06'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-06.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-07'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-07.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-kw-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-kw-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-kw-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-kw-02.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-kw-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-kw-03.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-kw-04'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-kw-04.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-kw-05'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-kw-05.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-n3-extras-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-n3-extras-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-n3-extras-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-n3-extras-02.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-n3-extras-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-n3-extras-03.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-n3-extras-04'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-n3-extras-04.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-n3-extras-05'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-n3-extras-05.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-n3-extras-06'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-n3-extras-06.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-n3-extras-07'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-n3-extras-07.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-n3-extras-08'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-n3-extras-08.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-n3-extras-09'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-n3-extras-09.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-n3-extras-10'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-n3-extras-10.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-n3-extras-11'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-n3-extras-11.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-n3-extras-12'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-n3-extras-12.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-n3-extras-13'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-n3-extras-13.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-08'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-08.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-09'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-09.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-10'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-10.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-11'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-11.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-12'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-12.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-13'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-13.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-14'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-14.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-15'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-15.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-16'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-16.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-struct-17'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-struct-17.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-lang-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-lang-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-esc-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-esc-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-esc-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-esc-02.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-esc-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-esc-03.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-esc-04'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-esc-04.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-pname-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-pname-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-pname-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-pname-02.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-pname-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-pname-03.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-string-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-string-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-string-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-string-02.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-string-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-string-03.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-string-04'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-string-04.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-string-05'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-string-05.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-string-06'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-string-06.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-string-07'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-string-07.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-num-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-num-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-num-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-num-02.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-num-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-num-03.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-num-04'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-num-04.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-num-05'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-num-05.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-eval-struct-01'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-eval-struct-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-eval-struct-01.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-eval-struct-01.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-eval-struct-02'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-eval-struct-02.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-eval-struct-02.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-eval-struct-02.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-01'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-01.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-01.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-02'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-02.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-02.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-02.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-03'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-03.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-03.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-03.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-04'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-04.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-04.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-04.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-05'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-05.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-05.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-05.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-06'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-06.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-06.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-06.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-07'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-07.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-07.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-07.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-08'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-08.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-08.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-08.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-09'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-09.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-09.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-09.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-10'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-10.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-10.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-10.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-11'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-11.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-11.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-11.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-12'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-12.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-12.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-12.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-13'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-13.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-13.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-13.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-14'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-14.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-14.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-14.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-15'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-15.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-15.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-15.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-16'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-16.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-16.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-16.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-17'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-17.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-17.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-17.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-18'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-18.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-18.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-18.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-19'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-19.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-19.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-19.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-20'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-20.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-20.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-20.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-21'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-21.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-21.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-21.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-22'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-22.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-22.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-22.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-23'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-23.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-23.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-23.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-24'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-24.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-24.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-24.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-25'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-25.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-25.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-25.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-26'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-26.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-26.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-26.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-subm-27'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-27.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-subm-27.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/turtle-subm-27.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-eval-bad-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-eval-bad-01.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-eval-bad-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-eval-bad-02.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-eval-bad-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-eval-bad-03.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-eval-bad-04'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-eval-bad-04.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'comment_following_localName'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "comment_following_localName.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "IRI_spo.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/comment_following_localName.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'number_sign_following_localName'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "number_sign_following_localName.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "number_sign_following_localName.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/number_sign_following_localName.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'comment_following_PNAME_NS'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "comment_following_PNAME_NS.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "comment_following_PNAME_NS.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/comment_following_PNAME_NS.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'number_sign_following_PNAME_NS'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "number_sign_following_PNAME_NS.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "number_sign_following_PNAME_NS.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/number_sign_following_PNAME_NS.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'LITERAL_LONG2_with_REVERSE_SOLIDUS'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG2_with_REVERSE_SOLIDUS.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "LITERAL_LONG2_with_REVERSE_SOLIDUS.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/LITERAL_LONG2_with_REVERSE_SOLIDUS.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-syntax-LITERAL2_with_langtag_and_datatype'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-LITERAL2_with_langtag_and_datatype.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'two_LITERAL_LONG2s'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "two_LITERAL_LONG2s.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "two_LITERAL_LONG2s.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/two_LITERAL_LONG2s.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'langtagged_LONG_with_subtag'(Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    {ok, File1} = file:open(
        filename:join(?config(data_dir, Config),
                              "langtagged_LONG_with_subtag.ttl"),
                      [read, {encoding, utf8}, binary]),
    {ok, File2} = file:open(
        filename:join(?config(data_dir, Config),
                              "langtagged_LONG_with_subtag.nt"),
                      [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store1, File1, turtle, #{base=><<"http://www.w3.org/2013/TurtleTests/langtagged_LONG_with_subtag.ttl">>}),
    ok = lagra:parse(Store2, File2, ntriples, #{allow_relative=>true}),
    true = lagra:isomorphic(Store1, {iri, <<"urn:nil">>}, Store2, {iri, <<"urn:nil">>}).

'turtle-syntax-bad-blank-label-dot-end'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-blank-label-dot-end.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-number-dot-in-anon'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-number-dot-in-anon.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-ln-dash-start'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-ln-dash-start.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-ln-escape'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-ln-escape.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-ln-escape-start'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-ln-escape-start.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-ns-dot-end'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-ns-dot-end.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-ns-dot-start'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-ns-dot-start.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-missing-ns-dot-end'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-missing-ns-dot-end.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-bad-missing-ns-dot-start'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "turtle-syntax-bad-missing-ns-dot-start.ttl"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, turtle).

'turtle-syntax-ln-dots'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-ln-dots.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-ln-colons'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-ln-colons.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-ns-dots'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-ns-dots.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).

'turtle-syntax-blank-label'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "turtle-syntax-blank-label.ttl"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, turtle).


all() ->
    ['IRI_subject','IRI_with_four_digit_numeric_escape','IRI_with_eight_digit_numeric_escape','IRI_with_all_punctuation','bareword_a_predicate','old_style_prefix','SPARQL_style_prefix','prefixed_IRI_predicate','prefixed_IRI_object','prefix_only_IRI','prefix_with_PN_CHARS_BASE_character_boundaries','prefix_with_non_leading_extras','localName_with_assigned_nfc_bmp_PN_CHARS_BASE_character_boundaries','localName_with_assigned_nfc_PN_CHARS_BASE_character_boundaries','localName_with_nfc_PN_CHARS_BASE_character_boundaries','default_namespace_IRI','prefix_reassigned_and_used','reserved_escaped_localName','percent_escaped_localName','HYPHEN_MINUS_in_localName','underscore_in_localName','localname_with_COLON','localName_with_leading_underscore','localName_with_leading_digit','localName_with_non_leading_extras','old_style_base','SPARQL_style_base','labeled_blank_node_subject','labeled_blank_node_object','labeled_blank_node_with_PN_CHARS_BASE_character_boundaries','labeled_blank_node_with_leading_underscore','labeled_blank_node_with_leading_digit','labeled_blank_node_with_non_leading_extras','anonymous_blank_node_subject','anonymous_blank_node_object','sole_blankNodePropertyList','blankNodePropertyList_as_subject','blankNodePropertyList_as_object','blankNodePropertyList_with_multiple_triples','nested_blankNodePropertyLists','blankNodePropertyList_containing_collection','collection_subject','collection_object','empty_collection','nested_collection','first','last','LITERAL1','LITERAL1_ascii_boundaries','LITERAL1_with_UTF8_boundaries','LITERAL1_all_controls','LITERAL1_all_punctuation','LITERAL_LONG1','LITERAL_LONG1_ascii_boundaries','LITERAL_LONG1_with_UTF8_boundaries','LITERAL_LONG1_with_1_squote','LITERAL_LONG1_with_2_squotes','LITERAL2','LITERAL2_ascii_boundaries','LITERAL2_with_UTF8_boundaries','LITERAL_LONG2','LITERAL_LONG2_ascii_boundaries','LITERAL_LONG2_with_UTF8_boundaries','LITERAL_LONG2_with_1_squote','LITERAL_LONG2_with_2_squotes','literal_with_CHARACTER_TABULATION','literal_with_BACKSPACE','literal_with_LINE_FEED','literal_with_CARRIAGE_RETURN','literal_with_FORM_FEED','literal_with_REVERSE_SOLIDUS','literal_with_escaped_CHARACTER_TABULATION','literal_with_escaped_BACKSPACE','literal_with_escaped_LINE_FEED','literal_with_escaped_CARRIAGE_RETURN','literal_with_escaped_FORM_FEED','literal_with_numeric_escape4','literal_with_numeric_escape8','IRIREF_datatype','prefixed_name_datatype','bareword_integer','bareword_decimal','bareword_double','double_lower_case_e','negative_numeric','positive_numeric','numeric_with_leading_0','literal_true','literal_false','langtagged_non_LONG','langtagged_LONG','lantag_with_subtag','objectList_with_two_objects','predicateObjectList_with_two_objectLists','repeated_semis_at_end','repeated_semis_not_at_end','turtle-syntax-file-01','turtle-syntax-file-02','turtle-syntax-file-03','turtle-syntax-uri-01','turtle-syntax-uri-02','turtle-syntax-uri-03','turtle-syntax-uri-04','turtle-syntax-base-01','turtle-syntax-base-02','turtle-syntax-base-03','turtle-syntax-base-04','turtle-syntax-prefix-01','turtle-syntax-prefix-02','turtle-syntax-prefix-03','turtle-syntax-prefix-04','turtle-syntax-prefix-05','turtle-syntax-prefix-06','turtle-syntax-prefix-07','turtle-syntax-prefix-08','turtle-syntax-prefix-09','turtle-syntax-string-01','turtle-syntax-string-02','turtle-syntax-string-03','turtle-syntax-string-04','turtle-syntax-string-05','turtle-syntax-string-06','turtle-syntax-string-07','turtle-syntax-string-08','turtle-syntax-string-09','turtle-syntax-string-10','turtle-syntax-string-11','turtle-syntax-str-esc-01','turtle-syntax-str-esc-02','turtle-syntax-str-esc-03','turtle-syntax-pname-esc-01','turtle-syntax-pname-esc-02','turtle-syntax-pname-esc-03','turtle-syntax-bnode-01','turtle-syntax-bnode-02','turtle-syntax-bnode-03','turtle-syntax-bnode-04','turtle-syntax-bnode-05','turtle-syntax-bnode-06','turtle-syntax-bnode-07','turtle-syntax-bnode-08','turtle-syntax-bnode-09','turtle-syntax-bnode-10','turtle-syntax-number-01','turtle-syntax-number-02','turtle-syntax-number-03','turtle-syntax-number-04','turtle-syntax-number-05','turtle-syntax-number-06','turtle-syntax-number-07','turtle-syntax-number-08','turtle-syntax-number-09','turtle-syntax-number-10','turtle-syntax-number-11','turtle-syntax-datatypes-01','turtle-syntax-datatypes-02','turtle-syntax-kw-01','turtle-syntax-kw-02','turtle-syntax-kw-03','turtle-syntax-struct-01','turtle-syntax-struct-02','turtle-syntax-struct-03','turtle-syntax-struct-04','turtle-syntax-struct-05','turtle-syntax-lists-01','turtle-syntax-lists-02','turtle-syntax-lists-03','turtle-syntax-lists-04','turtle-syntax-lists-05','turtle-syntax-bad-uri-01','turtle-syntax-bad-uri-02','turtle-syntax-bad-uri-03','turtle-syntax-bad-uri-04','turtle-syntax-bad-uri-05','turtle-syntax-bad-prefix-01','turtle-syntax-bad-prefix-02','turtle-syntax-bad-prefix-03','turtle-syntax-bad-prefix-04','turtle-syntax-bad-prefix-05','turtle-syntax-bad-base-01','turtle-syntax-bad-base-02','turtle-syntax-bad-base-03','turtle-syntax-bad-struct-01','turtle-syntax-bad-struct-02','turtle-syntax-bad-struct-03','turtle-syntax-bad-struct-04','turtle-syntax-bad-struct-05','turtle-syntax-bad-struct-06','turtle-syntax-bad-struct-07','turtle-syntax-bad-kw-01','turtle-syntax-bad-kw-02','turtle-syntax-bad-kw-03','turtle-syntax-bad-kw-04','turtle-syntax-bad-kw-05','turtle-syntax-bad-n3-extras-01','turtle-syntax-bad-n3-extras-02','turtle-syntax-bad-n3-extras-03','turtle-syntax-bad-n3-extras-04','turtle-syntax-bad-n3-extras-05','turtle-syntax-bad-n3-extras-06','turtle-syntax-bad-n3-extras-07','turtle-syntax-bad-n3-extras-08','turtle-syntax-bad-n3-extras-09','turtle-syntax-bad-n3-extras-10','turtle-syntax-bad-n3-extras-11','turtle-syntax-bad-n3-extras-12','turtle-syntax-bad-n3-extras-13','turtle-syntax-bad-struct-08','turtle-syntax-bad-struct-09','turtle-syntax-bad-struct-10','turtle-syntax-bad-struct-11','turtle-syntax-bad-struct-12','turtle-syntax-bad-struct-13','turtle-syntax-bad-struct-14','turtle-syntax-bad-struct-15','turtle-syntax-bad-struct-16','turtle-syntax-bad-struct-17','turtle-syntax-bad-lang-01','turtle-syntax-bad-esc-01','turtle-syntax-bad-esc-02','turtle-syntax-bad-esc-03','turtle-syntax-bad-esc-04','turtle-syntax-bad-pname-01','turtle-syntax-bad-pname-02','turtle-syntax-bad-pname-03','turtle-syntax-bad-string-01','turtle-syntax-bad-string-02','turtle-syntax-bad-string-03','turtle-syntax-bad-string-04','turtle-syntax-bad-string-05','turtle-syntax-bad-string-06','turtle-syntax-bad-string-07','turtle-syntax-bad-num-01','turtle-syntax-bad-num-02','turtle-syntax-bad-num-03','turtle-syntax-bad-num-04','turtle-syntax-bad-num-05','turtle-eval-struct-01','turtle-eval-struct-02','turtle-subm-01','turtle-subm-02','turtle-subm-03','turtle-subm-04','turtle-subm-05','turtle-subm-06','turtle-subm-07','turtle-subm-08','turtle-subm-09','turtle-subm-10','turtle-subm-11','turtle-subm-12','turtle-subm-13','turtle-subm-14','turtle-subm-15','turtle-subm-16','turtle-subm-17','turtle-subm-18','turtle-subm-19','turtle-subm-20','turtle-subm-21','turtle-subm-22','turtle-subm-23','turtle-subm-24','turtle-subm-25','turtle-subm-26','turtle-subm-27','turtle-eval-bad-01','turtle-eval-bad-02','turtle-eval-bad-03','turtle-eval-bad-04','comment_following_localName','number_sign_following_localName','comment_following_PNAME_NS','number_sign_following_PNAME_NS','LITERAL_LONG2_with_REVERSE_SOLIDUS','turtle-syntax-LITERAL2_with_langtag_and_datatype','two_LITERAL_LONG2s','langtagged_LONG_with_subtag','turtle-syntax-bad-blank-label-dot-end','turtle-syntax-bad-number-dot-in-anon','turtle-syntax-bad-ln-dash-start','turtle-syntax-bad-ln-escape','turtle-syntax-bad-ln-escape-start','turtle-syntax-bad-ns-dot-end','turtle-syntax-bad-ns-dot-start','turtle-syntax-bad-missing-ns-dot-end','turtle-syntax-bad-missing-ns-dot-start','turtle-syntax-ln-dots','turtle-syntax-ln-colons','turtle-syntax-ns-dots','turtle-syntax-blank-label'].
