%%% The following module is generated by the gen-parser-test-suite.sh script.
%%% Do not edit by hand.

-module(parser_nquads_w3_SUITE).
-include_lib("common_test/include/ct.hrl").
-export([all/0]).

%% The test suite is generated from the test manifest file ct/parser_nquads_w3_SUITE_data/manifest.ttl

-export(['nq-syntax-uri-01'/1]).
-export(['nq-syntax-uri-02'/1]).
-export(['nq-syntax-uri-03'/1]).
-export(['nq-syntax-uri-04'/1]).
-export(['nq-syntax-uri-05'/1]).
-export(['nq-syntax-uri-06'/1]).
-export(['nq-syntax-bnode-01'/1]).
-export(['nq-syntax-bnode-02'/1]).
-export(['nq-syntax-bnode-03'/1]).
-export(['nq-syntax-bnode-04'/1]).
-export(['nq-syntax-bnode-05'/1]).
-export(['nq-syntax-bnode-06'/1]).
-export(['nq-syntax-bad-literal-01'/1]).
-export(['nq-syntax-bad-literal-02'/1]).
-export(['nq-syntax-bad-literal-03'/1]).
-export(['nq-syntax-bad-uri-01'/1]).
-export(['nq-syntax-bad-quint-01'/1]).
-export(['nt-syntax-file-01'/1]).
-export(['nt-syntax-file-02'/1]).
-export(['nt-syntax-file-03'/1]).
-export(['nt-syntax-uri-01'/1]).
-export(['nt-syntax-uri-02'/1]).
-export(['nt-syntax-uri-03'/1]).
-export(['nt-syntax-uri-04'/1]).
-export(['nt-syntax-string-01'/1]).
-export(['nt-syntax-string-02'/1]).
-export(['nt-syntax-string-03'/1]).
-export(['nt-syntax-str-esc-01'/1]).
-export(['nt-syntax-str-esc-02'/1]).
-export(['nt-syntax-str-esc-03'/1]).
-export(['nt-syntax-bnode-01'/1]).
-export(['nt-syntax-bnode-02'/1]).
-export(['nt-syntax-bnode-03'/1]).
-export(['nt-syntax-datatypes-01'/1]).
-export(['nt-syntax-datatypes-02'/1]).
-export(['nt-syntax-bad-uri-01'/1]).
-export(['nt-syntax-bad-uri-02'/1]).
-export(['nt-syntax-bad-uri-03'/1]).
-export(['nt-syntax-bad-uri-04'/1]).
-export(['nt-syntax-bad-uri-05'/1]).
-export(['nt-syntax-bad-uri-06'/1]).
-export(['nt-syntax-bad-uri-07'/1]).
-export(['nt-syntax-bad-uri-08'/1]).
-export(['nt-syntax-bad-uri-09'/1]).
-export(['nt-syntax-bad-prefix-01'/1]).
-export(['nt-syntax-bad-base-01'/1]).
-export(['nt-syntax-bad-struct-01'/1]).
-export(['nt-syntax-bad-struct-02'/1]).
-export(['nt-syntax-bad-lang-01'/1]).
-export(['nt-syntax-bad-esc-01'/1]).
-export(['nt-syntax-bad-esc-02'/1]).
-export(['nt-syntax-bad-esc-03'/1]).
-export(['nt-syntax-bad-string-01'/1]).
-export(['nt-syntax-bad-string-02'/1]).
-export(['nt-syntax-bad-string-03'/1]).
-export(['nt-syntax-bad-string-04'/1]).
-export(['nt-syntax-bad-string-05'/1]).
-export(['nt-syntax-bad-string-06'/1]).
-export(['nt-syntax-bad-string-07'/1]).
-export(['nt-syntax-bad-num-01'/1]).
-export(['nt-syntax-bad-num-02'/1]).
-export(['nt-syntax-bad-num-03'/1]).
-export(['nt-syntax-subm-01'/1]).
-export(['comment_following_triple'/1]).
-export(['literal_ascii_boundaries'/1]).
-export(['literal_with_UTF8_boundaries'/1]).
-export(['literal_all_controls'/1]).
-export(['literal_all_punctuation'/1]).
-export(['literal_with_squote'/1]).
-export(['literal_with_2_squotes'/1]).
-export(['literal'/1]).
-export(['literal_with_dquote'/1]).
-export(['literal_with_2_dquotes'/1]).
-export(['literal_with_REVERSE_SOLIDUS2'/1]).
-export(['literal_with_CHARACTER_TABULATION'/1]).
-export(['literal_with_BACKSPACE'/1]).
-export(['literal_with_LINE_FEED'/1]).
-export(['literal_with_CARRIAGE_RETURN'/1]).
-export(['literal_with_FORM_FEED'/1]).
-export(['literal_with_REVERSE_SOLIDUS'/1]).
-export(['literal_with_numeric_escape4'/1]).
-export(['literal_with_numeric_escape8'/1]).
-export(['langtagged_string'/1]).
-export(['lantag_with_subtag'/1]).
-export(['minimal_whitespace'/1]).
-export([init_per_suite/1, end_per_suite/1]).
-export([init_per_testcase/2, end_per_testcase/2]).

init_per_suite(Config) ->
    {ok, _} = application:ensure_all_started(lagra),
    [{prefix, "http://www.w3.org/2013/N-QuadsTests/manifest.ttl\#"}|Config].

end_per_suite(_Config) ->
    application:stop(lagra),
    ok.

init_per_testcase(_, Config) ->
    Store1 = lagra:create_store(trivial),
    Store2 = lagra:create_store(trivial),
    [{store1, Store1}, {store2, Store2}|Config].

end_per_testcase(_, Config) ->
    Store1 = ?config(store1, Config),
    Store2 = ?config(store2, Config),
    lagra:destroy_store(Store1),
	lagra:destroy_store(Store2).


'nq-syntax-uri-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nq-syntax-uri-01.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nq-syntax-uri-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nq-syntax-uri-02.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nq-syntax-uri-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nq-syntax-uri-03.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nq-syntax-uri-04'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nq-syntax-uri-04.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nq-syntax-uri-05'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nq-syntax-uri-05.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nq-syntax-uri-06'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nq-syntax-uri-06.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nq-syntax-bnode-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nq-syntax-bnode-01.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nq-syntax-bnode-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nq-syntax-bnode-02.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nq-syntax-bnode-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nq-syntax-bnode-03.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nq-syntax-bnode-04'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nq-syntax-bnode-04.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nq-syntax-bnode-05'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nq-syntax-bnode-05.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nq-syntax-bnode-06'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nq-syntax-bnode-06.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nq-syntax-bad-literal-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nq-syntax-bad-literal-01.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nq-syntax-bad-literal-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nq-syntax-bad-literal-02.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nq-syntax-bad-literal-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nq-syntax-bad-literal-03.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nq-syntax-bad-uri-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nq-syntax-bad-uri-01.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nq-syntax-bad-quint-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nq-syntax-bad-quint-01.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-file-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-file-01.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-file-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-file-02.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-file-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-file-03.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-uri-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-uri-01.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-uri-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-uri-02.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-uri-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-uri-03.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-uri-04'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-uri-04.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-string-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-string-01.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-string-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-string-02.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-string-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-string-03.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-str-esc-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-str-esc-01.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-str-esc-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-str-esc-02.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-str-esc-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-str-esc-03.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-bnode-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-bnode-01.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-bnode-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-bnode-02.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-bnode-03'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-bnode-03.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-datatypes-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-datatypes-01.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-datatypes-02'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-datatypes-02.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'nt-syntax-bad-uri-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-uri-01.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-uri-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-uri-02.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-uri-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-uri-03.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-uri-04'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-uri-04.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-uri-05'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-uri-05.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-uri-06'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-uri-06.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-uri-07'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-uri-07.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-uri-08'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-uri-08.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-uri-09'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-uri-09.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-prefix-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-prefix-01.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-base-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-base-01.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-struct-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-struct-01.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-struct-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-struct-02.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-lang-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-lang-01.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-esc-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-esc-01.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-esc-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-esc-02.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-esc-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-esc-03.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-string-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-string-01.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-string-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-string-02.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-string-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-string-03.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-string-04'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-string-04.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-string-05'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-string-05.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-string-06'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-string-06.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-string-07'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-string-07.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-num-01'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-num-01.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-num-02'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-num-02.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-bad-num-03'(Config) ->
    Store = ?config(store1, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              "nt-syntax-bad-num-03.nq"),
                      [read, {encoding, utf8}, binary]),
    {error, _, _} = lagra:parse(Store, File, nquads).

'nt-syntax-subm-01'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "nt-syntax-subm-01.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'comment_following_triple'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "comment_following_triple.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_ascii_boundaries'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_ascii_boundaries.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_UTF8_boundaries'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_UTF8_boundaries.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_all_controls'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_all_controls.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_all_punctuation'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_all_punctuation.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_squote'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_squote.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_2_squotes'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_2_squotes.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_dquote'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_dquote.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_2_dquotes'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_2_dquotes.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_REVERSE_SOLIDUS2'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_REVERSE_SOLIDUS2.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_CHARACTER_TABULATION'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_CHARACTER_TABULATION.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_BACKSPACE'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_BACKSPACE.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_LINE_FEED'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_LINE_FEED.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_CARRIAGE_RETURN'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_CARRIAGE_RETURN.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_FORM_FEED'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_FORM_FEED.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_REVERSE_SOLIDUS'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_REVERSE_SOLIDUS.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_numeric_escape4'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_numeric_escape4.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'literal_with_numeric_escape8'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "literal_with_numeric_escape8.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'langtagged_string'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "langtagged_string.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'lantag_with_subtag'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "lantag_with_subtag.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).

'minimal_whitespace'(Config) ->
    Store = ?config(store1, Config),
    Filename = filename:join(?config(data_dir, Config), "minimal_whitespace.nq"),
    io:format("Filename = ~p~n", [Filename]),
    {ok, File} = file:open(Filename, [read, {encoding, utf8}, binary]),
    ok = lagra:parse(Store, File, nquads).


all() ->
    ['nq-syntax-uri-01','nq-syntax-uri-02','nq-syntax-uri-03','nq-syntax-uri-04','nq-syntax-uri-05','nq-syntax-uri-06','nq-syntax-bnode-01','nq-syntax-bnode-02','nq-syntax-bnode-03','nq-syntax-bnode-04','nq-syntax-bnode-05','nq-syntax-bnode-06','nq-syntax-bad-literal-01','nq-syntax-bad-literal-02','nq-syntax-bad-literal-03','nq-syntax-bad-uri-01','nq-syntax-bad-quint-01','nt-syntax-file-01','nt-syntax-file-02','nt-syntax-file-03','nt-syntax-uri-01','nt-syntax-uri-02','nt-syntax-uri-03','nt-syntax-uri-04','nt-syntax-string-01','nt-syntax-string-02','nt-syntax-string-03','nt-syntax-str-esc-01','nt-syntax-str-esc-02','nt-syntax-str-esc-03','nt-syntax-bnode-01','nt-syntax-bnode-02','nt-syntax-bnode-03','nt-syntax-datatypes-01','nt-syntax-datatypes-02','nt-syntax-bad-uri-01','nt-syntax-bad-uri-02','nt-syntax-bad-uri-03','nt-syntax-bad-uri-04','nt-syntax-bad-uri-05','nt-syntax-bad-uri-06','nt-syntax-bad-uri-07','nt-syntax-bad-uri-08','nt-syntax-bad-uri-09','nt-syntax-bad-prefix-01','nt-syntax-bad-base-01','nt-syntax-bad-struct-01','nt-syntax-bad-struct-02','nt-syntax-bad-lang-01','nt-syntax-bad-esc-01','nt-syntax-bad-esc-02','nt-syntax-bad-esc-03','nt-syntax-bad-string-01','nt-syntax-bad-string-02','nt-syntax-bad-string-03','nt-syntax-bad-string-04','nt-syntax-bad-string-05','nt-syntax-bad-string-06','nt-syntax-bad-string-07','nt-syntax-bad-num-01','nt-syntax-bad-num-02','nt-syntax-bad-num-03','nt-syntax-subm-01','comment_following_triple','literal_ascii_boundaries','literal_with_UTF8_boundaries','literal_all_controls','literal_all_punctuation','literal_with_squote','literal_with_2_squotes','literal','literal_with_dquote','literal_with_2_dquotes','literal_with_REVERSE_SOLIDUS2','literal_with_CHARACTER_TABULATION','literal_with_BACKSPACE','literal_with_LINE_FEED','literal_with_CARRIAGE_RETURN','literal_with_FORM_FEED','literal_with_REVERSE_SOLIDUS','literal_with_numeric_escape4','literal_with_numeric_escape8','langtagged_string','lantag_with_subtag','minimal_whitespace'].
