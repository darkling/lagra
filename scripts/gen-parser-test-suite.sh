#!/bin/bash

manifest="$1"
suite="$2"

function get_config()
{
	roqet -D "$1" -r tsv -q \
        -e 'PREFIX tm: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#>
            SELECT ?file ?uscore ?typ
            WHERE { ?x a ?typ;
                       tm:action ?file;
                       tm:name ?name.
                    BIND (REPLACE(?name, "-", "_") AS ?uscore)
                   }' \
        | sed -e 1d \
		      -e 's=<file://.*/ct/parser_ntriples_w3_SUITE_data/==' \
			  -e 's=<http://www.w3.org/ns/rdftest#==' -e 's=>==g' -e 's="==g'
}

cat <<EOF
%%% The following module is generated by the get-test-params.sh script.
%%% Do not edit by hand.

-module($suite).
-include_lib("common_test/include/ct.hrl").
-export([all/0]).

%% The test suite is generated from the test manifest file $1

EOF

funs=
fun_names=

while read file uscore type; do
	case $type in
		TestNTriplesPositiveSyntax)
			funs="${funs}
$uscore(Config) ->
    io:format(\"Config = ~p~n\", [Config]),
    Store = ?config(store, Config),
    Filename = filename:join(?config(data_dir, Config), \"$file\"),
    io:format(\"Filename = ~p~n\", [Filename]),
    {ok, File} = file:open(Filename, [read]),
    ok = lagra:parse(Store, File, ntriples).
"
			fun_names="${fun_names}, $uscore/1"
			;;

		TestNTriplesNegativeSyntax)
			funs="${funs}
$uscore(Config) ->
    Store = ?config(store, Config),
    {ok, File} = file:open(
        filename:join(?config(data_dir, Config),
                              \"$file\"),
                      [read]),
    {error, _, _} = lagra:parse(Store, File, ntriples).
"
			fun_names="${fun_names}, $uscore/1"
			;;

		*)
			echo Unknown test type: $type >&2
			exit 1
			;;
	esac
done < <(get_config "${manifest}")

fun_names="${fun_names/, /}"

echo "-export([${fun_names}])."
echo "-export([init_per_suite/1, end_per_suite/1])."
echo "-export([init_per_testcase/2, end_per_testcase/2])."

cat <<EOF

init_per_suite(Config) ->
    {ok, _} = application:ensure_all_started(lagra),
    Config.

end_per_suite(_Config) ->
    application:stop(lagra),
    ok.

init_per_testcase(_, Config) ->
    Store = lagra:create_store(trivial),
    [{store, Store}|Config].

end_per_testcase(_, Config) ->
    Store = ?config(store, Config),
    lagra:destroy_store(Store).

EOF

echo "${funs}"

echo all\(\) -\>
echo "    "[${fun_names//\/1/}].
